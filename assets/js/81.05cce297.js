(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{460:function(t,v,a){"use strict";a.r(v);var _=a(45),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"变量作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[t._v("#")]),t._v(" 变量作用域")]),t._v(" "),a("h2",{attrs:{id:"定义变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义变量"}},[t._v("#")]),t._v(" 定义变量")]),t._v(" "),a("blockquote",[a("p",[t._v("var let  和 const")])]),t._v(" "),a("h3",{attrs:{id:"var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" var")]),t._v(" "),a("ul",[a("li",[t._v("只支持全局作用域 和 函数作用域，不支持块级作用域")]),t._v(" "),a("li",[t._v("变量提升：无论在什么地方声明，都会提升到当前作用域最顶  "),a("code",[t._v("(注：只提升声明，不提升赋值。所以在声明之前虽然可以访问变量但值为 undefined)")])]),t._v(" "),a("li",[t._v("同一作用域可以重复声明")]),t._v(" "),a("li",[t._v("所有通过var定义的全局变量和函数都会成为window对象的属性和方法")]),t._v(" "),a("li",[t._v("如果变量未经声明就被初始化了，那么它就会自动被添加到全局上下文")])]),t._v(" "),a("h3",{attrs:{id:"let-es6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-es6"}},[t._v("#")]),t._v(" let（ES6）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("支持块级作用域")])]),t._v(" "),a("li",[a("p",[t._v("不提升（暂时性死区），必须在声明之后使用变量")]),t._v(" "),a("p",[a("code",[t._v("严格来讲，let在JavaScript运行时中也会被提升，但由于“暂时性死区”的缘故，不能在声明之前使用let变量。")])])]),t._v(" "),a("li",[a("p",[t._v("同一作用域只能声明一次，不允许重复声明")])])]),t._v(" "),a("h3",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("ul",[a("li",[t._v("声明时必须初始化")]),t._v(" "),a("li",[t._v("一经声明，不能重新赋值（引用类型中的值可以修改，如：数组中的元素， 对象中的属性）")]),t._v(" "),a("li",[t._v("其他与 let 一样")])]),t._v(" "),a("blockquote",[a("p",[t._v("注：如果明确变量不在使用可以将其设置为 null，从而"),a("em",[t._v("解除引用")]),t._v("。尤其是全局变量、全局对象的属性和事件处理器")])]),t._v(" "),a("h2",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("p",[t._v("一套用来存储变量，并且可以方便地找到这些变量的规则。这套规则被称为"),a("code",[t._v("作用域")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("code",[t._v("作用域")]),t._v("负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。")]),t._v(" "),a("li",[t._v("作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。")])])]),t._v(" "),a("h3",{attrs:{id:"lhs-和-rhs-查询变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lhs-和-rhs-查询变量"}},[t._v("#")]),t._v(" LHS 和 RHS 查询变量")]),t._v(" "),a("p",[t._v("如果查找的目的是对变量进行赋值，那么就会使用LHS查询；如果目的是获取变量的值，就会使用RHS查询。")])])}),[],!1,null,null,null);v.default=s.exports}}]);