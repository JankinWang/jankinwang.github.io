(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{819:function(t,r,o){"use strict";o.r(r);var e=o(48),_=Object(e.a)({},(function(){var t=this,r=t.$createElement,o=t._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"iterator-和-for-of-循环"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#iterator-和-for-of-循环"}},[t._v("#")]),t._v(" Iterator 和 for...of 循环")]),t._v(" "),o("ol",[o("li",[o("p",[o("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/iterator#Iterator%EF%BC%88%E9%81%8D%E5%8E%86%E5%99%A8%EF%BC%89%E7%9A%84%E6%A6%82%E5%BF%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("Iterator（遍历器）的概念"),o("OutboundLink")],1)]),t._v(" "),o("p",[t._v("它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。")]),t._v(" "),o("p",[t._v("Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令"),o("code",[t._v("for...of")]),t._v("循环，Iterator 接口主要供"),o("code",[t._v("for...of")]),t._v("消费。")]),t._v(" "),o("p",[o("strong",[t._v("Iterator 的遍历过程是这样的")])]),t._v(" "),o("p",[t._v("（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。")]),t._v(" "),o("p",[t._v("（2）第一次调用指针对象的"),o("code",[t._v("next")]),t._v("方法，可以将指针指向数据结构的第一个成员。")]),t._v(" "),o("p",[t._v("（3）第二次调用指针对象的"),o("code",[t._v("next")]),t._v("方法，指针就指向数据结构的第二个成员。")]),t._v(" "),o("p",[t._v("（4）不断调用指针对象的"),o("code",[t._v("next")]),t._v("方法，直到它指向数据结构的结束位置。")])]),t._v(" "),o("li",[o("p",[t._v("[默认 Iterator 接口](https://es6.ruanyifeng.com/#docs/iterator#默认 Iterator 接口)")]),t._v(" "),o("p",[t._v("任意一个对象的"),o("code",[t._v("Symbol.iterator")]),t._v("方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象")])]),t._v(" "),o("li",[o("p",[t._v("[调用 Iterator 接口的场合](https://es6.ruanyifeng.com/#docs/iterator#调用 Iterator 接口的场合)")])]),t._v(" "),o("li",[o("p",[t._v("[字符串的 Iterator 接口](https://es6.ruanyifeng.com/#docs/iterator#字符串的 Iterator 接口)")])]),t._v(" "),o("li",[o("p",[t._v("[Iterator 接口与 Generator 函数](https://es6.ruanyifeng.com/#docs/iterator#Iterator 接口与 Generator 函数)")])]),t._v(" "),o("li",[o("p",[t._v("[遍历器对象的 return()，throw()](https://es6.ruanyifeng.com/#docs/iterator#遍历器对象的 return()，throw())")]),t._v(" "),o("ol",[o("li",[t._v("如果"),o("code",[t._v("for...of")]),t._v("循环提前退出（通常是因为出错，或者有"),o("code",[t._v("break")]),t._v("语句），就会调用"),o("code",[t._v("return()")]),t._v("方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署"),o("code",[t._v("return()")]),t._v("方法。")])])]),t._v(" "),o("li",[o("p",[t._v("[for...of 循环](https://es6.ruanyifeng.com/#docs/iterator#for...of 循环)")])])])])}),[],!1,null,null,null);r.default=_.exports}}]);