(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{431:function(t,e,a){"use strict";a.r(e);var s=a(45),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"定义变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义变量"}},[t._v("#")]),t._v(" 定义变量")]),t._v(" "),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("[let 命令](https://es6.ruanyifeng.com/#docs/let#let 命令)")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("块级作用域"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("[const 命令](https://es6.ruanyifeng.com/#docs/let#const 命令)")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/let#%E9%A1%B6%E5%B1%82%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("顶层对象的属性"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("[globalThis 对象](https://es6.ruanyifeng.com/#docs/let#globalThis 对象)")]),t._v(" "),a("h3",{attrs:{id:"顶层对象的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶层对象的属性"}},[t._v("#")]),t._v(" 顶层对象的属性")]),t._v(" "),a("ul",[a("li",[t._v("浏览器里面，顶层对象是"),a("code",[t._v("window")]),t._v("，但 Node 和 Web Worker 没有"),a("code",[t._v("window")]),t._v("。")]),t._v(" "),a("li",[t._v("浏览器和 Web Worker 里面，"),a("code",[t._v("self")]),t._v("也指向顶层对象，但是 Node 没有"),a("code",[t._v("self")]),t._v("。")]),t._v(" "),a("li",[t._v("Node 里面，顶层对象是"),a("code",[t._v("global")]),t._v("，但其他环境都不支持。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/tc39/proposal-global",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES2020"),a("OutboundLink")],1),t._v(" 在语言标准的层面，引入"),a("code",[t._v("globalThis")]),t._v("作为顶层对象")])])])]),t._v(" "),a("h2",{attrs:{id:"var、let、const-比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var、let、const-比较"}},[t._v("#")]),t._v(" var、let、const 比较")]),t._v(" "),a("h3",{attrs:{id:"var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" var")]),t._v(" "),a("ul",[a("li",[t._v("只支持全局作用域 和 函数作用域，不支持块级作用域")]),t._v(" "),a("li",[t._v("变量提升：无论在什么地方声明，都会提升到当前作用域最顶  "),a("code",[t._v("(注：只提升声明，不提升赋值。所以在声明之前虽然可以访问变量但值为 undefined)")])]),t._v(" "),a("li",[t._v("同一作用域可以重复声明")]),t._v(" "),a("li",[t._v("通过var定义的"),a("code",[t._v("全局变量")]),t._v("和"),a("code",[t._v("函数")]),t._v("都会成为window对象的属性和方法，let 则不会")]),t._v(" "),a("li",[t._v("如果变量未经声明就被初始化了，那么它就会自动被添加到全局上下文, 成为window的属性或方法")])]),t._v(" "),a("h3",{attrs:{id:"let-es6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-es6"}},[t._v("#")]),t._v(" let（ES6）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("支持块级作用域")])]),t._v(" "),a("li",[a("p",[t._v("不提升，必须在声明之后使用变量")]),t._v(" "),a("p",[a("code",[t._v("严格来讲，let在JavaScript运行时中也会被提升，但由于“暂时性死区”的缘故，不能在声明之前使用let变量。")])])]),t._v(" "),a("li",[a("p",[t._v("同作用域内不允许重复声明")])]),t._v(" "),a("li",[a("p",[t._v("暂时性死区-只要块级作用域内存在"),a("code",[t._v("let")]),t._v("命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("ul",[a("li",[t._v("声明时必须初始化")]),t._v(" "),a("li",[t._v("一经声明，不能重新赋值（引用类型中的值可以修改，如：数组中的元素， 对象中的属性）")]),t._v(" "),a("li",[t._v("其他与 let 一样")])]),t._v(" "),a("blockquote",[a("p",[t._v("注：如果明确变量不在使用可以将其设置为 null，从而"),a("em",[t._v("解除引用")]),t._v("。尤其是全局变量、全局对象的属性和事件处理器")])])])}),[],!1,null,null,null);e.default=r.exports}}]);